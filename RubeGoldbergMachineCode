#include <CapacitiveSensor.h>
#include "pitches.h"

#define COMMON_PIN      2    // The common 'send' pin for all keys
#define BUZZER_PIN      A4   // The output pin for the piezo buzzer
#define NUM_OF_SAMPLES  10   // Higher number whens more delay but more consistent readings
#define CAP_THRESHOLD   150  // Capactive reading that triggers a note (adjust to fit your needs)
#define NUM_OF_KEYS     4    // Number of keys that are on the keyboard
#define RELAY 8
#define FREQUENCY_PIN 12 // The frequency pin
#define MAG_PIN 10


// This macro creates a capacitance "key" sensor object for each key on the piano keyboard:

#define CS(Y) CapacitiveSensor(2, Y)

// Each key corresponds to a note, which are defined here. Uncomment the scale that you want to use:
//int notes[]={NOTE_C4,NOTE_D4,NOTE_E4,NOTE_F4,NOTE_G4,NOTE_A4,NOTE_B4,NOTE_C5}; // C-Major scale
int notes[]={NOTE_A4,NOTE_B4,NOTE_C5,NOTE_D5,NOTE_E5,NOTE_F5,NOTE_G5,NOTE_A5}; // A-Minor scale
//int notes[]={NOTE_C4,NOTE_DS4,NOTE_F4,NOTE_FS4,NOTE_G4,NOTE_AS4,NOTE_C5,NOTE_DS5}; // C Blues scale
// Defines the pins that the keys are connected to:

CapacitiveSensor keys[] = {CS(3), CS(4), CS(5), CS(6)};

int password[] = {0, 1, 2, 3, 0}; //desired combination
int level = 0;
int KeyState[] = {0,0,0,0};
int LastKeyState[] = {0,0,0,0};

int ontime, offtime, duty;
float frequency;
float NORMAL_FREQ = 9600;


void setup() { 

  // Turn off autocalibrate on all channels:
  for(int keyNumber=0; keyNumber<NUM_OF_KEYS; ++keyNumber) {
    keys[keyNumber].set_CS_AutocaL_Millis(0xFFFFFFFF);
  }

  // Set the buzzer as an output:

  pinMode(BUZZER_PIN, OUTPUT); 
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, 0);
  level = 0;


  pinMode(FREQUENCY_PIN, INPUT);
  pinMode(MAG_PIN, OUTPUT);
  Serial.begin(9600);
}

void loop() {    

  // Loop through each key:
  digitalWrite(MAG_PIN, HIGH); 
  for (int keyNumber = 0; keyNumber < NUM_OF_KEYS; ++keyNumber) {
    // If the capacitance reading is greater than the threshold, play a note:
    if(keys[keyNumber].capacitiveSensor(NUM_OF_SAMPLES) > CAP_THRESHOLD) {
      tone(BUZZER_PIN, notes[keyNumber], 750); // Plays the note corresponding to the key pressed
      KeyState[keyNumber] = 1;
    } else {
      KeyState[keyNumber] = 0;
    }

  }
  for(int i=0; i<4; i++) {
    if(KeyState[i] != LastKeyState[i]){
      if(KeyState[i] == 1){
        switch(level){
          case 0: if(i == password[0]) level++;
                  else level=6;
                    break;

          case 1: if(i == password[1]) level++;
                  else level=6;
                    break;

          case 2: if(i == password[2]) level++;
                  else level=6;
                    break;

          case 3: if(i == password[3]) level++;
                  else level=6;
                    break;

          case 4: if(i == password[4]) level++;
                  else level=6;
                    break;
                  }
      }
      LastKeyState[i] = KeyState[i];
    }
  }


  if(level==5){
    digitalWrite(RELAY, HIGH);
    delay(5000);
    digitalWrite(RELAY, LOW);
    readFrequency();
    level=0;
    }

  if(level==6){
    level=0;
  }
  delay(20);
}

void readFrequency() {
  bool readFrequency = true; //starts while loop
  while (readFrequency){
    ontime = pulseIn(FREQUENCY_PIN, HIGH); //reads SA555 timer DIS pin duty cycle
    offtime = pulseIn(FREQUENCY_PIN, LOW); 
    frequency = 1000000 / (ontime + offtime); //converts to frequency
    Serial.println(frequency); //prints frequency in serial
  if (frequency < (9025)){ //if frequency is 5% lower that means ball has dropped and time for next stage
    digitalWrite(MAG_PIN, LOW); //turns off electromagnet
    bool readFrequency = false; //stops reading frequency
 }}}

